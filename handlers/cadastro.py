#!/usr/bin/env python
# -*- coding: utf-8 -*-

"""
Handlers para o processo de cadastro do CCB Alerta Bot
Adaptado para usar SQLite para armazenamento persistente
BLOCO 1/2: Imports, configura√ß√µes e fun√ß√µes de inicializa√ß√£o
VERS√ÉO COMPLETA: Mantendo todas as implementa√ß√µes existentes + fix cancelar
"""

import re
import math
import logging
from telegram import Update, InlineKeyboardButton, InlineKeyboardMarkup
from telegram.ext import (
    CommandHandler, MessageHandler, CallbackQueryHandler,
    ConversationHandler, ContextTypes, filters
)

from config import CODIGO, NOME, FUNCAO, CONFIRMAR
try:
    # Primeiro tenta importar diretamente (funciona se o arquivo estiver no PYTHONPATH)
    from utils.database import (
        verificar_cadastro_existente,
        salvar_responsavel as inserir_cadastro,  # Usar a fun√ß√£o correta
        obter_cadastros_por_user_id as obter_cadastro_por_user_id  # Usar a fun√ß√£o correta
    )
except ImportError:
    # Se falhar, tenta encontrar o m√≥dulo no diret√≥rio raiz
    import sys
    import os
    # Adicionar diret√≥rio pai ao path
    sys.path.insert(0, os.path.abspath(os.path.join(os.path.dirname(__file__), '..')))
    from utils.database import (
        verificar_cadastro_existente, 
        salvar_responsavel as inserir_cadastro,  # Usar a fun√ß√£o correta
        obter_cadastros_por_user_id as obter_cadastro_por_user_id  # Usar a fun√ß√£o correta
    )

# Import atualizado - adicionada fun√ß√£o de detec√ß√£o
from handlers.data import (
    IGREJAS, FUNCOES, agrupar_igrejas, agrupar_funcoes, 
    obter_igreja_por_codigo, detectar_funcao_similar
)

# Logger
logger = logging.getLogger(__name__)

# Estados adicionais para a navega√ß√£o nos menus
SELECIONAR_IGREJA, SELECIONAR_FUNCAO = range(4, 6)

async def iniciar_cadastro_etapas(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """Inicia o processo de cadastro passo a passo"""
    # Verificar se o usu√°rio aceitou a LGPD
    usuario_aceitou_lgpd = context.user_data.get('aceitou_lgpd', False)
    
    if not usuario_aceitou_lgpd:
        # Exibir mensagem de LGPD com bot√£o de aceita√ß√£o
        keyboard = [
            [InlineKeyboardButton("‚úÖ Aceito os termos", callback_data="aceitar_lgpd_cadastro")]
        ]
        reply_markup = InlineKeyboardMarkup(keyboard)
        
        await update.message.reply_text(
            "*A Paz de Deus, irm√£o!*\n\n"
            "Antes de prosseguir com o cadastro, informamos que este canal coleta *seu nome*, *fun√ß√£o* e *ID do Telegram*.\n\n"
            "Esses dados s√£o utilizados **exclusivamente para comunica√ß√£o administrativa e operacional** "
            "das Casas de Ora√ß√£o da nossa regi√£o.\n\n"
            "Eles **n√£o ser√£o compartilhados com terceiros** e s√£o tratados conforme a "
            "**Lei Geral de Prote√ß√£o de Dados (LGPD ‚Äì Lei n¬∫ 13.709/2018)**.\n\n"
            "Ao continuar, voc√™ autoriza o uso dessas informa√ß√µes para envio de mensagens "
            "relacionadas √† sua fun√ß√£o ou responsabilidade.\n\n"
            "Voc√™ pode solicitar a exclus√£o dos seus dados a qualquer momento usando o comando:\n"
            "*/remover*\n\n"
            "Para ver a pol√≠tica de privacidade completa, use o comando */privacidade*\n\n"
            "Se estiver de acordo, clique no bot√£o abaixo para continuar com o cadastro.",
            reply_markup=reply_markup,
            parse_mode='Markdown'
        )
        return ConversationHandler.END
    
    # Se j√° aceitou os termos, continuar com o cadastro normal
    # Limpar qualquer dado pendente do contexto
    if 'cadastro_temp' in context.user_data:
        del context.user_data['cadastro_temp']
    
    context.user_data['cadastro_temp'] = {'pagina_igreja': 0}
    
    logger.info(f"Iniciando cadastro para usu√°rio {update.effective_user.id}")
    await mostrar_menu_igrejas(update, context)
    return SELECIONAR_IGREJA

async def processar_aceite_lgpd_cadastro(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """Processa o aceite dos termos de LGPD para cadastro"""
    query = update.callback_query
    await query.answer()
    
    if query.data == "aceitar_lgpd_cadastro":
        # Marcar que o usu√°rio aceitou os termos
        context.user_data['aceitou_lgpd'] = True
        
        # Editar a mensagem para confirmar o aceite
        await query.edit_message_text(
            " *A Santa Paz de Deus!*\n\n"
            "‚úÖ *Agradecemos por aceitar os termos!*\n\n"
            "Agora podemos prosseguir com seu cadastro.\n"
            "Por favor, use o comando /cadastrar novamente para iniciar o processo.\n\n"
            "_Deus te aben√ßoe!_ üôè",
            parse_mode='Markdown'
        )

async def cadastro_comando(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """Redireciona para o cadastro em etapas"""
    await update.message.reply_text(
        " *A Paz de Deus!*\n\n"
        "üìù *Nova forma de cadastro!*\n\n"
        "Agora utilizamos um processo mais simples, guiado passo a passo.\n\n"
        "Por favor, use o comando */cadastrar* para iniciar o cadastro.\n\n"
        "_Deus te aben√ßoe!_ üôè",
        parse_mode='Markdown'
    )
    # Iniciar automaticamente o fluxo de cadastro em etapas
    return await iniciar_cadastro_etapas(update, context)

async def mostrar_menu_igrejas(update, context: ContextTypes.DEFAULT_TYPE):
    """
    Mostra o menu de sele√ß√£o de igrejas paginado
    CORRE√á√ÉO DEFINITIVA: Solu√ß√£o √† prova de regress√£o para navega√ß√£o
    """
    # Agrupar igrejas em p√°ginas
    igrejas_paginadas = agrupar_igrejas()
    pagina_atual = context.user_data['cadastro_temp'].get('pagina_igreja', 0)
    
    # Verificar limites da p√°gina
    if pagina_atual >= len(igrejas_paginadas):
        pagina_atual = 0
    elif pagina_atual < 0:
        pagina_atual = len(igrejas_paginadas) - 1
    
    context.user_data['cadastro_temp']['pagina_igreja'] = pagina_atual
    
    # Preparar bot√µes para a p√°gina atual
    keyboard = []
    for igreja in igrejas_paginadas[pagina_atual]:
        # Criar callback data para este bot√£o
        callback_data = f"igreja_{igreja['codigo']}"
        
        # Log para depura√ß√£o
        logger.info(f"Criando bot√£o com callback_data: {callback_data}")
        
        keyboard.append([InlineKeyboardButton(
            f"{igreja['codigo']} - {igreja['nome']}", 
            callback_data=callback_data
        )])
    
    # Adicionar bot√µes de navega√ß√£o
    nav_buttons = []
    if len(igrejas_paginadas) > 1:
        nav_buttons.append(InlineKeyboardButton("‚¨ÖÔ∏è Anterior", callback_data="igreja_anterior"))
        nav_buttons.append(InlineKeyboardButton("Pr√≥xima ‚û°Ô∏è", callback_data="igreja_proxima"))
    keyboard.append(nav_buttons)
    
    # Bot√£o para cancelar
    keyboard.append([InlineKeyboardButton("‚ùå Cancelar", callback_data="cancelar_cadastro")])
    
    reply_markup = InlineKeyboardMarkup(keyboard)
    
    # Criar ou editar mensagem dependendo do contexto
    texto_mensagem = (
        " *A Santa Paz de Deus!*\n\n"
        "Vamos iniciar o cadastro da Casa de Ora√ß√£o.\n\n"
        "Por favor, selecione a Casa de Ora√ß√£o:\n\n"
        f"üìÑ *P√°gina {pagina_atual + 1}/{len(igrejas_paginadas)}*"
    )
    
    # CORRE√á√ÉO DEFINITIVA: Normalizar tipo de objeto primeiro
    # Determinar se √© primeira exibi√ß√£o (Update) ou navega√ß√£o (CallbackQuery)
    is_callback_update = False
    message_func = None
    
    try:
        # Tentar identificar se √© CallbackQuery
        if hasattr(update, 'edit_message_text'):
            is_callback_update = True
            message_func = update.edit_message_text
            logger.info("üîÑ Navega√ß√£o detectada - usando edit_message_text")
        # Tentar identificar se √© Update normal
        elif hasattr(update, 'message') and update.message:
            is_callback_update = False  
            message_func = update.message.reply_text
            logger.info("üì± Nova mensagem detectada - usando reply_text")
        # Fallback: tentar como CallbackQuery por padr√£o
        else:
            is_callback_update = True
            message_func = update.edit_message_text
            logger.warning("‚ö†Ô∏è Tipo n√£o identificado - usando edit_message_text como fallback")
            
    except Exception as e:
        logger.error(f"‚ùå Erro ao determinar tipo de update: {e}")
        # Fallback final - tentar como mensagem normal
        is_callback_update = False
        message_func = update.message.reply_text
    
    # Enviar mensagem usando a fun√ß√£o determinada
    try:
        await message_func(
            texto_mensagem,
            reply_markup=reply_markup,
            parse_mode='Markdown'
        )
        logger.info("‚úÖ Menu de igrejas exibido com sucesso")
        
    except Exception as e:
        logger.error(f"‚ùå Erro ao enviar menu de igrejas: {e}")
        # Fallback final dos fallbacks
        try:
            if hasattr(update, 'message') and update.message:
                await update.message.reply_text(
                    "‚ùå Erro interno. Use /cadastrar para reiniciar.",
                    parse_mode='Markdown'
                )
        except:
            logger.error("‚ùå Fallback final tamb√©m falhou")
            
async def processar_selecao_igreja(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """Processa a sele√ß√£o ou navega√ß√£o no menu de igrejas - VERS√ÉO CORRIGIDA COM DEBUG"""
    query = update.callback_query
    await query.answer()
    
    data = query.data
    logger.info(f"üîç DEBUG NAVEGA√á√ÉO: Callback recebido: '{data}'")
    
    # Verificar exatamente qual callback est√° sendo recebido
    if data == "igreja_anterior":
        logger.info("‚úÖ Navega√ß√£o ANTERIOR detectada")
        # Navegar para a p√°gina anterior
        context.user_data['cadastro_temp']['pagina_igreja'] -= 1
        await mostrar_menu_igrejas(query, context)
        return SELECIONAR_IGREJA
    
    elif data == "igreja_proxima":
        logger.info("‚úÖ Navega√ß√£o PR√ìXIMA detectada")
        # Navegar para a pr√≥xima p√°gina
        context.user_data['cadastro_temp']['pagina_igreja'] += 1
        await mostrar_menu_igrejas(query, context)
        return SELECIONAR_IGREJA
    
    elif data == "cancelar_cadastro":
        logger.info("‚úÖ Cancelamento detectado")
        # CORRIGIDO: Usar return para garantir que ConversationHandler.END seja retornado
        return await cancelar_cadastro(update, context)
    
    elif data.startswith("igreja_BR"):
        logger.info(f"‚úÖ Sele√ß√£o de igreja detectada: {data}")
        # Selecionar igreja (verificar se come√ßa com igreja_BR)
        codigo_igreja = data.replace("igreja_", "")
        igreja = obter_igreja_por_codigo(codigo_igreja)
        
        if igreja:
            # Armazenar c√≥digo e nome da igreja
            context.user_data['cadastro_temp']['codigo'] = igreja['codigo']
            context.user_data['cadastro_temp']['nome_igreja'] = igreja['nome']
            
            logger.info(f"Igreja selecionada: {igreja['codigo']} - {igreja['nome']}")
            
            # Continuar para a pr√≥xima etapa (nome do respons√°vel)
            await query.edit_message_text(
                f"*A Paz de Deus!*\n\n"
                f"‚úÖ Casa de Ora√ß√£o selecionada: *{igreja['codigo']} - {igreja['nome']}*\n\n"
                f"Agora, DIGITE O NOME DO RESPONS√ÅVEL:",
                parse_mode='Markdown'
            )
            return NOME
        else:
            logger.warning(f"Igreja n√£o encontrada para c√≥digo: {codigo_igreja}")
            await mostrar_menu_igrejas(query, context)
            return SELECIONAR_IGREJA
    
    else:
        # Fallback - mostrar menu novamente
        logger.warning(f"‚ùå Callback N√ÉO RECONHECIDO: '{data}'")
        await mostrar_menu_igrejas(query, context)
        return SELECIONAR_IGREJA
        
async def receber_nome(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """Recebe o nome e solicita a fun√ß√£o"""
    nome = update.message.text.strip()
    
    # Valida√ß√£o b√°sica
    if len(nome) < 3:
        await update.message.reply_text(
            "‚ùå Por favor, digite um nome v√°lido com pelo menos 3 caracteres."
        )
        return NOME
    
    # Armazenar temporariamente
    context.user_data['cadastro_temp']['nome'] = nome
    logger.info(f"Nome recebido: {nome}")
    
    # Preparar e mostrar menu de fun√ß√µes
    context.user_data['cadastro_temp']['pagina_funcao'] = 0
    await mostrar_menu_funcoes(update, context)
    return SELECIONAR_FUNCAO

async def mostrar_menu_funcoes(update, context: ContextTypes.DEFAULT_TYPE):
    """
    Mostra o menu de sele√ß√£o de fun√ß√µes - CORRE√á√ÉO DEFINITIVA
    Solu√ß√£o √† prova de regress√£o para navega√ß√£o
    """
    # Agrupar fun√ß√µes em p√°ginas
    funcoes_paginadas = agrupar_funcoes()
    pagina_atual = context.user_data['cadastro_temp'].get('pagina_funcao', 0)
    
    # Verificar limites da p√°gina
    if pagina_atual >= len(funcoes_paginadas):
        pagina_atual = 0
    elif pagina_atual < 0:
        pagina_atual = len(funcoes_paginadas) - 1
    
    context.user_data['cadastro_temp']['pagina_funcao'] = pagina_atual
    
    # Preparar bot√µes para a p√°gina atual
    keyboard = []
    for funcao in funcoes_paginadas[pagina_atual]:
        callback_data = f"funcao_{funcao}"
        logger.info(f"Criando bot√£o de fun√ß√£o com callback_data: {callback_data}")
        
        keyboard.append([InlineKeyboardButton(
            funcao,
            callback_data=callback_data
        )])
    
    # Adicionar bot√µes de navega√ß√£o
    nav_buttons = []
    if len(funcoes_paginadas) > 1:
        nav_buttons.append(InlineKeyboardButton("‚¨ÖÔ∏è Anterior", callback_data="funcao_anterior"))
        nav_buttons.append(InlineKeyboardButton("Pr√≥xima ‚û°Ô∏è", callback_data="funcao_proxima"))
    keyboard.append(nav_buttons)
    
    # APENAS bot√£o "üîÑ Outra Fun√ß√£o" (sem "Outro")
    keyboard.append([InlineKeyboardButton("üîÑ Outra Fun√ß√£o", callback_data="funcao_outra")])
    
    # Bot√£o para cancelar
    keyboard.append([InlineKeyboardButton("‚ùå Cancelar", callback_data="cancelar_cadastro")])
    
    reply_markup = InlineKeyboardMarkup(keyboard)
    
    # Criar ou editar mensagem dependendo do contexto
    texto_mensagem = (
        " *A Paz de Deus!*\n\n"
        f"‚úÖ Nome registrado: *{context.user_data['cadastro_temp']['nome']}*\n\n"
        "Agora, selecione a fun√ß√£o do respons√°vel:\n\n"
        f"üìÑ *P√°gina {pagina_atual + 1}/{len(funcoes_paginadas)}*"
    )
    
    # CORRE√á√ÉO DEFINITIVA: Normalizar tipo de objeto primeiro
    # Determinar se √© primeira exibi√ß√£o (Update) ou navega√ß√£o (CallbackQuery)
    is_callback_update = False
    message_func = None
    
    try:
        # Tentar identificar se √© CallbackQuery
        if hasattr(update, 'edit_message_text'):
            is_callback_update = True
            message_func = update.edit_message_text
            logger.info("üîÑ Navega√ß√£o de fun√ß√µes detectada - usando edit_message_text")
        # Tentar identificar se √© Update normal
        elif hasattr(update, 'message') and update.message:
            is_callback_update = False  
            message_func = update.message.reply_text
            logger.info("üì± Nova mensagem de fun√ß√µes detectada - usando reply_text")
        # Fallback: tentar como CallbackQuery por padr√£o
        else:
            is_callback_update = True
            message_func = update.edit_message_text
            logger.warning("‚ö†Ô∏è Tipo de fun√ß√£o n√£o identificado - usando edit_message_text como fallback")
            
    except Exception as e:
        logger.error(f"‚ùå Erro ao determinar tipo de update em fun√ß√µes: {e}")
        # Fallback final - tentar como mensagem normal
        is_callback_update = False
        message_func = update.message.reply_text
    
    # Enviar mensagem usando a fun√ß√£o determinada
    try:
        await message_func(
            texto_mensagem,
            reply_markup=reply_markup,
            parse_mode='Markdown'
        )
        logger.info("‚úÖ Menu de fun√ß√µes exibido com sucesso")
        
    except Exception as e:
        logger.error(f"‚ùå Erro ao enviar menu de fun√ß√µes: {e}")
        # Fallback final dos fallbacks
        try:
            if hasattr(update, 'message') and update.message:
                await update.message.reply_text(
                    "‚ùå Erro interno. Use /cadastrar para reiniciar.",
                    parse_mode='Markdown'
                )
        except:
            logger.error("‚ùå Fallback final de fun√ß√µes tamb√©m falhou")
            
async def processar_selecao_funcao(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """
    Processa a sele√ß√£o ou navega√ß√£o no menu de fun√ß√µes
    VERS√ÉO CORRIGIDA: Com debug e tratamento adequado
    """
    query = update.callback_query
    await query.answer()
    
    data = query.data
    logger.info(f"üîç DEBUG FUN√á√ÉO: Callback recebido: '{data}'")
    
    # Verificar exatamente qual callback est√° sendo recebido
    if data == "funcao_anterior":
        logger.info("‚úÖ Navega√ß√£o ANTERIOR (fun√ß√µes) detectada")
        # Navegar para a p√°gina anterior
        context.user_data['cadastro_temp']['pagina_funcao'] -= 1
        await mostrar_menu_funcoes(query, context)
        return SELECIONAR_FUNCAO
    
    elif data == "funcao_proxima":
        logger.info("‚úÖ Navega√ß√£o PR√ìXIMA (fun√ß√µes) detectada")
        # Navegar para a pr√≥xima p√°gina
        context.user_data['cadastro_temp']['pagina_funcao'] += 1
        await mostrar_menu_funcoes(query, context)
        return SELECIONAR_FUNCAO
    
    elif data == "cancelar_cadastro":
        logger.info("‚úÖ Cancelamento (fun√ß√µes) detectado")
        # CORRIGIDO: Usar return para garantir que ConversationHandler.END seja retornado
        return await cancelar_cadastro(update, context)
    
    elif data == "funcao_outra":
        logger.info("‚úÖ Fun√ß√£o OUTRA detectada")
        # Solicitar entrada manual da fun√ß√£o - MENSAGEM MELHORADA
        await query.edit_message_text(
            "*A Santa Paz de Deus!*\n\n"
            "‚úçÔ∏è **DIGITE A FUN√á√ÉO QUE VOC√ä EXERCE NA CASA DE ORA√á√ÉO:**\n\n"
            "*(Exemplo: Patrim√¥nio, Encarregado da Limpeza, Tesoureiro, Secret√°rio, etc.)*\n\n"
            "üìù *Observa√ß√£o:* Se sua fun√ß√£o j√° estiver dispon√≠vel nos bot√µes acima, "
            "ser√° solicitado que voc√™ a selecione pelos bot√µes.",
            parse_mode='Markdown'
        )
        return FUNCAO
    
    elif data.startswith("funcao_") and not data.endswith(("_anterior", "_proxima", "_outra")):
        logger.info(f"‚úÖ Sele√ß√£o de fun√ß√£o detectada: {data}")
        # Selecionar fun√ß√£o dos bot√µes
        funcao = data.replace("funcao_", "")
        
        # Verificar se a fun√ß√£o existe na lista oficial
        if funcao not in FUNCOES:
            logger.warning(f"Fun√ß√£o n√£o reconhecida selecionada: {funcao}")
            await mostrar_menu_funcoes(query, context)
            return SELECIONAR_FUNCAO
        
        # Armazenar fun√ß√£o selecionada
        context.user_data['cadastro_temp']['funcao'] = funcao
        logger.info(f"Fun√ß√£o selecionada dos bot√µes: {funcao}")
        
        # Continuar para confirma√ß√£o
        codigo = context.user_data['cadastro_temp']['codigo']
        nome = context.user_data['cadastro_temp']['nome']
        nome_igreja = context.user_data['cadastro_temp']['nome_igreja']
        
        # Preparar bot√µes de confirma√ß√£o
        keyboard = [
            [
                InlineKeyboardButton("‚úÖ Confirmar Cadastro", callback_data="confirmar_etapas"),
                InlineKeyboardButton("‚ùå Cancelar", callback_data="cancelar_etapas")
            ]
        ]
        reply_markup = InlineKeyboardMarkup(keyboard)
        
        await query.edit_message_text(
            "*A Santa Paz de Deus!*\n\n"
            "üìù *Confirme os dados do cadastro:*\n\n"
            f"üìç *C√≥digo:* `{codigo}`\n"
            f"üè¢ *Casa:* `{nome_igreja}`\n"
            f"üë§ *Nome:* `{nome}`\n"
            f"üîß *Fun√ß√£o:* `{funcao}`\n\n"
            "Os dados est√£o corretos?",
            reply_markup=reply_markup,
            parse_mode='Markdown'
        )
        return CONFIRMAR
    
    else:
        # Fallback - mostrar menu novamente
        logger.warning(f"‚ùå Callback de fun√ß√£o N√ÉO RECONHECIDO: '{data}'")
        await mostrar_menu_funcoes(query, context)
        return SELECIONAR_FUNCAO
        
async def receber_funcao(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """
    Recebe a fun√ß√£o digitada manualmente e aplica valida√ß√£o inteligente
    VERS√ÉO CORRIGIDA: Remove op√ß√£o "Prosseguir Assim Mesmo" - OBRIGA volta ao menu
    """
    funcao = update.message.text.strip()
    
    # Valida√ß√£o b√°sica - comprimento m√≠nimo
    if len(funcao) < 3:
        await update.message.reply_text(
            "‚ùå Por favor, digite uma fun√ß√£o v√°lida com pelo menos 3 caracteres."
        )
        return FUNCAO
    
    # Valida√ß√£o b√°sica - n√£o permitir apenas n√∫meros ou caracteres especiais
    if not re.search(r'[a-zA-Z√Ä-√ø]', funcao):
        await update.message.reply_text(
            "‚ùå Por favor, digite uma fun√ß√£o v√°lida que contenha letras."
        )
        return FUNCAO
    
    # VALIDA√á√ÉO INTELIGENTE - Detectar se fun√ß√£o √© similar √†s dispon√≠veis nos bot√µes
    funcao_similar_encontrada, funcao_oficial = detectar_funcao_similar(funcao)
    
    if funcao_similar_encontrada:
        # Fun√ß√£o digitada √© similar a uma fun√ß√£o dos bot√µes - OBRIGAR volta ao menu
        keyboard = [
            [InlineKeyboardButton("üîÑ Voltar ao Menu de Fun√ß√µes", callback_data="voltar_menu_funcoes")]
        ]
        reply_markup = InlineKeyboardMarkup(keyboard)
        
        await update.message.reply_text(
            f"‚ö†Ô∏è *Fun√ß√£o j√° dispon√≠vel nos bot√µes!*\n\n"
            f"Voc√™ digitou: *\"{funcao}\"*\n\n"
            f"Esta fun√ß√£o √© similar a: *\"{funcao_oficial}\"*\n"
            f"que j√° est√° dispon√≠vel nos bot√µes do menu.\n\n"
            f"üîπ *Por favor, use o bot√£o do menu para selecionar* *\"{funcao_oficial}\"*",
            reply_markup=reply_markup,
            parse_mode='Markdown'
        )
        return FUNCAO
    
    # Valida√ß√£o aprovada - fun√ß√£o √© realmente diferente das dispon√≠veis
    # Armazenar fun√ß√£o digitada
    context.user_data['cadastro_temp']['funcao'] = funcao
    logger.info(f"Fun√ß√£o digitada e aprovada: {funcao}")
    
    # Preparar bot√µes de confirma√ß√£o
    keyboard = [
        [
            InlineKeyboardButton("‚úÖ Confirmar Cadastro", callback_data="confirmar_etapas"),
            InlineKeyboardButton("‚ùå Cancelar", callback_data="cancelar_etapas")
        ]
    ]
    reply_markup = InlineKeyboardMarkup(keyboard)
    
    # Extrair dados do cadastro para confirma√ß√£o
    codigo = context.user_data['cadastro_temp']['codigo']
    nome = context.user_data['cadastro_temp']['nome']
    nome_igreja = context.user_data['cadastro_temp']['nome_igreja']
    
    await update.message.reply_text(
        " *A Paz de Deus!*\n\n"
        "üìù *Confirme os dados do cadastro:*\n\n"
        f"üìç *C√≥digo:* `{codigo}`\n"
        f"üè¢ *Casa:* `{nome_igreja}`\n"
        f"üë§ *Nome:* `{nome}`\n"
        f"üîß *Fun√ß√£o:* `{funcao}`\n\n"
        "Os dados est√£o corretos?",
        reply_markup=reply_markup,
        parse_mode='Markdown'
    )
    return CONFIRMAR

async def processar_callback_funcao_similar(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """
    Processa os callbacks relacionados √† detec√ß√£o de fun√ß√£o similar
    VERS√ÉO CORRIGIDA: Remove l√≥gica de "prosseguir" - apenas volta ao menu
    """
    query = update.callback_query
    await query.answer()
    
    data = query.data
    logger.info(f"Callback fun√ß√£o similar recebido: {data}")
    
    if data == "voltar_menu_funcoes":
        # Limpar TODOS os dados tempor√°rios relacionados √† fun√ß√£o
        if 'cadastro_temp' in context.user_data:
            # Remover dados da fun√ß√£o digitada se existirem
            context.user_data['cadastro_temp'].pop('funcao_digitada_similar', None)
            # Resetar p√°gina de fun√ß√£o para garantir estado limpo
            context.user_data['cadastro_temp']['pagina_funcao'] = 0
        
        logger.info("Voltando ao menu de fun√ß√µes ap√≥s detec√ß√£o de fun√ß√£o similar")
        
        # Voltar para o menu de fun√ß√µes com estado limpo
        await mostrar_menu_funcoes(query, context)
        return SELECIONAR_FUNCAO
    
    # Fallback - for√ßar volta ao menu em caso de qualquer erro
    logger.warning(f"Callback n√£o reconhecido: {data} - for√ßando volta ao menu")
    
    if 'cadastro_temp' in context.user_data:
        context.user_data['cadastro_temp']['pagina_funcao'] = 0
    
    await mostrar_menu_funcoes(query, context)
    return SELECIONAR_FUNCAO

async def confirmar_etapas(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """
    Processa a confirma√ß√£o do cadastro em etapas
    CORRE√á√ÉO: Melhor tratamento de casos de cadastro duplicado e atualiza√ß√£o
    """
    query = update.callback_query
    await query.answer()
    
    data = query.data
    logger.info(f"Callback de confirma√ß√£o: {data}")
    
    # CORRIGIDO: Usar return para garantir que ConversationHandler.END seja retornado
    if data == "cancelar_etapas":
        return await cancelar_cadastro(update, context)
    
    # Obter dados do contexto
    codigo = context.user_data['cadastro_temp'].get('codigo', '')
    nome = context.user_data['cadastro_temp'].get('nome', '')
    funcao = context.user_data['cadastro_temp'].get('funcao', '')
    nome_igreja = context.user_data['cadastro_temp'].get('nome_igreja', '')
    user_id = update.effective_user.id
    username = update.effective_user.username or ""
    
    # CORRE√á√ÉO: Usar a nova fun√ß√£o de verifica√ß√£o detalhada
    from utils.database import verificar_cadastro_existente_detalhado
    cadastro_existente = verificar_cadastro_existente_detalhado(codigo, nome)
    
    if cadastro_existente:
        # Existe cadastro com mesmo c√≥digo + nome
        
        if cadastro_existente['user_id'] == user_id:
            # √â o mesmo usu√°rio - permitir atualiza√ß√£o da fun√ß√£o
            if cadastro_existente['funcao'] != funcao:
                await query.edit_message_text(
                    " *A Paz de Deus!*\n\n"
                    "‚ÑπÔ∏è *Voc√™ j√° tem cadastro nesta igreja!*\n\n"
                    f"üìç *C√≥digo:* `{codigo}`\n"
                    f"üè¢ *Casa:* `{nome_igreja}`\n"
                    f"üë§ *Nome:* `{nome}`\n"
                    f"üîß *Fun√ß√£o atual:* `{cadastro_existente['funcao']}`\n"
                    f"üîß *Nova fun√ß√£o:* `{funcao}`\n\n"
                    "‚úÖ *Sua fun√ß√£o ser√° atualizada.*",
                    parse_mode='Markdown'
                )
            else:
                await query.edit_message_text(
                    " *A Paz de Deus!*\n\n"
                    "‚ÑπÔ∏è *Voc√™ j√° tem cadastro id√™ntico nesta igreja!*\n\n"
                    f"üìç *C√≥digo:* `{codigo}`\n"
                    f"üè¢ *Casa:* `{nome_igreja}`\n"
                    f"üë§ *Nome:* `{nome}`\n"
                    f"üîß *Fun√ß√£o:* `{funcao}`\n\n"
                    "‚úÖ *Seu cadastro j√° est√° atualizado.*",
                    parse_mode='Markdown'
                )
        else:
            # Usu√°rio diferente com mesmo nome na mesma igreja - BLOQUEAR
            await query.edit_message_text(
                " *A Paz de Deus!*\n\n"
                "‚ö†Ô∏è *Nome j√° cadastrado nesta igreja!*\n\n"
                f"üìç *C√≥digo:* `{codigo}`\n"
                f"üè¢ *Casa:* `{nome_igreja}`\n"
                f"üë§ *Nome:* `{nome}`\n"
                f"üîß *Fun√ß√£o j√° cadastrada:* `{cadastro_existente['funcao']}`\n\n"
                "‚ùå *N√£o √© poss√≠vel cadastrar o mesmo nome duas vezes na mesma igreja.*\n\n"
                "Se voc√™ √© realmente esta pessoa, entre em contato com o administrador.\n\n"
                "_Deus te aben√ßoe!_ üôè",
                parse_mode='Markdown'
            )
            
            # Limpar dados do contexto
            if 'cadastro_temp' in context.user_data:
                del context.user_data['cadastro_temp']
            return ConversationHandler.END
    
    # Salvar cadastro usando a nova fun√ß√£o SQLite
    try:
        sucesso, status = inserir_cadastro(codigo, nome, funcao, user_id, username)
        
        if not sucesso:
            # Tratar diferentes tipos de erro
            if status.startswith("nome_ja_cadastrado"):
                partes = status.split("|")
                funcao_existente = partes[1] if len(partes) > 1 else "Desconhecida"
                
                await query.edit_message_text(
                    " *A Paz de Deus!*\n\n"
                    "‚ö†Ô∏è *Nome j√° cadastrado nesta igreja!*\n\n"
                    f"üìç *C√≥digo:* `{codigo}`\n"
                    f"üè¢ *Casa:* `{nome_igreja}`\n"
                    f"üë§ *Nome:* `{nome}`\n"
                    f"üîß *Fun√ß√£o j√° cadastrada:* `{funcao_existente}`\n\n"
                    "‚ùå *N√£o √© poss√≠vel cadastrar o mesmo nome duas vezes na mesma igreja.*\n\n"
                    "_Deus te aben√ßoe!_ üôè",
                    parse_mode='Markdown'
                )
            else:
                raise Exception(f"Erro no cadastro: {status}")
        else:
            # Sucesso - tratar diferentes tipos de status
            if status.startswith("funcao_atualizada"):
                partes = status.split("|")
                funcao_antiga = partes[1] if len(partes) > 1 else "Desconhecida"
                funcao_nova = partes[2] if len(partes) > 2 else funcao
                
                await query.edit_message_text(
                    f" *Projeto D√©bito Autom√°tico*\n\n"
                    f"‚úÖ *Fun√ß√£o atualizada com sucesso!*\n\n"
                    f"üìç *C√≥digo:* `{codigo}`\n"
                    f"üè¢ *Casa:* `{nome_igreja}`\n"
                    f"üë§ *Nome:* `{nome}`\n"
                    f"üîß *Fun√ß√£o anterior:* `{funcao_antiga}`\n"
                    f"üîß *Nova fun√ß√£o:* `{funcao_nova}`\n\n"
                    f"üì¢ Os alertas autom√°ticos de consumo continuar√£o sendo enviados para voc√™.\n\n"
                    f"_Deus te aben√ßoe!_ üôå",
                    parse_mode='Markdown'
                )
            else:
                # Cadastro novo
                await query.edit_message_text(
                    f" *Projeto D√©bito Autom√°tico*\n\n"
                    f"‚úÖ *Cadastro recebido com sucesso:*\n\n"
                    f"üìç *C√≥digo:* `{codigo}`\n"
                    f"üè¢ *Casa:* `{nome_igreja}`\n"
                    f"üë§ *Nome:* `{nome}`\n"
                    f"üîß *Fun√ß√£o:* `{funcao}`\n\n"
                    f"üóÇÔ∏è Estamos em *fase de cadastro* dos irm√£os respons√°veis pelo acompanhamento das Contas de Consumo.\n"
                    f"üì¢ Assim que esta fase for conclu√≠da, os *alertas autom√°ticos de consumo* come√ßar√£o a ser enviados.\n\n"
                    f"_Deus te aben√ßoe!_ üôå",
                    parse_mode='Markdown'
                )
        
    except Exception as e:
        logger.error(f"Erro ao salvar cadastro: {str(e)}")
        await query.edit_message_text(
            " *A Paz de Deus!*\n\n"
            "‚ùå *Houve um problema ao processar seu cadastro!*\n\n"
            "Por favor, tente novamente mais tarde ou entre em contato com o administrador.\n\n"
            "_Deus te aben√ßoe!_ üôè",
            parse_mode='Markdown'
        )
    
    # Limpar dados do contexto
    if 'cadastro_temp' in context.user_data:
        del context.user_data['cadastro_temp']
    return ConversationHandler.END

# ==================== FUN√á√ÉO CANCELAR CORRIGIDA ====================
async def cancelar_cadastro(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """CORRIGIDO: Cancela o cadastro em qualquer etapa"""
    
    # Limpar dados do contexto
    if 'cadastro_temp' in context.user_data:
        del context.user_data['cadastro_temp']
    
    # Verificar se √© callback ou comando
    if hasattr(update, 'callback_query') and update.callback_query:
        await update.callback_query.answer()
        await update.callback_query.edit_message_text(
            " *A Santa Paz de Deus!*\n\n"
            "‚ùå *Cadastro cancelado!*\n\n"
            "Voc√™ pode iniciar novamente quando quiser usando /cadastrar.\n\n"
            "_Deus te aben√ßoe!_ üôè",
            parse_mode='Markdown'
        )
    else:
        await update.message.reply_text(
            " *A Santa Paz de Deus!*\n\n"
            "‚ùå *Cadastro cancelado!*\n\n"
            "Voc√™ pode iniciar novamente quando quiser usando /cadastrar.\n\n"
            "_Deus te aben√ßoe!_ üôè",
            parse_mode='Markdown'
        )
    
    # CRITICAL: Sempre retornar ConversationHandler.END
    return ConversationHandler.END

def registrar_handlers_cadastro(application):
    """
    Registra handlers relacionados ao cadastro
    VERS√ÉO DEFINITIVA: Corre√ß√£o completa de patterns e ordem
    """
    # Handler para cadastro manual via comando
    application.add_handler(CommandHandler("cadastro", cadastro_comando))
    
    # Callback handler para aceite de LGPD no cadastro
    application.add_handler(CallbackQueryHandler(
        processar_aceite_lgpd_cadastro, 
        pattern='^aceitar_lgpd_cadastro$'
    ))
    
    # Handler para cadastro em etapas (conversation) - CORRIGIDO
    cadastro_handler = ConversationHandler(
        entry_points=[
            CommandHandler("cadastrar", iniciar_cadastro_etapas),
            MessageHandler(filters.Regex(r"^(üñãÔ∏è Cadastrar Respons√°vel|üìù CADASTRAR RESPONS√ÅVEL üìù)$"), iniciar_cadastro_etapas)
        ],
        states={
            SELECIONAR_IGREJA: [
                # CORRE√á√ÉO DEFINITIVA: Handlers espec√≠ficos com alta prioridade
                CallbackQueryHandler(processar_selecao_igreja, pattern=r'^igreja_anterior$'),
                CallbackQueryHandler(processar_selecao_igreja, pattern=r'^igreja_proxima$'),
                CallbackQueryHandler(processar_selecao_igreja, pattern=r'^igreja_BR21-\d+$'),
                CallbackQueryHandler(processar_selecao_igreja, pattern=r'^cancelar_cadastro$'),
            ],
            NOME: [
                MessageHandler(filters.TEXT & ~filters.COMMAND, receber_nome)
            ],
            SELECIONAR_FUNCAO: [
                # CORRE√á√ÉO DEFINITIVA: Handlers espec√≠ficos com alta prioridade
                CallbackQueryHandler(processar_selecao_funcao, pattern=r'^funcao_anterior$'),
                CallbackQueryHandler(processar_selecao_funcao, pattern=r'^funcao_proxima$'),
                CallbackQueryHandler(processar_selecao_funcao, pattern=r'^funcao_outra$'),
                CallbackQueryHandler(processar_selecao_funcao, pattern=r'^funcao_[^_]+$'),
                CallbackQueryHandler(processar_selecao_funcao, pattern=r'^cancelar_cadastro$'),
            ],
            FUNCAO: [
                MessageHandler(filters.TEXT & ~filters.COMMAND, receber_funcao),
                CallbackQueryHandler(processar_callback_funcao_similar, pattern=r'^voltar_menu_funcoes$')
            ],
            CONFIRMAR: [
                CallbackQueryHandler(confirmar_etapas, pattern=r'^(confirmar|cancelar)_etapas$')
            ]
        },
        fallbacks=[
            CommandHandler("cancelar", cancelar_cadastro),
            CallbackQueryHandler(cancelar_cadastro, pattern=r'^cancelar_cadastro$')
        ],
        name="cadastro_conversation",
        persistent=False,
        per_message=False  # IMPORTANTE: Evita tracking por mensagem
    )
    application.add_handler(cadastro_handler)
    
    logger.info("‚úÖ Handlers de cadastro registrados - CORRE√á√ÉO DEFINITIVA APLICADA")
