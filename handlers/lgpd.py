#!/usr/bin/env python
# -*- coding: utf-8 -*-

"""
Handlers para processar callbacks LGPD e aumentar a fonte
"""

import os
import pandas as pd
import logging
from datetime import datetime
import pytz
from telegram import Update, InlineKeyboardButton, InlineKeyboardMarkup, ParseMode
from telegram.ext import CommandHandler, ContextTypes, CallbackQueryHandler

from config import EXCEL_FILE

# Configurar logger
logger = logging.getLogger(__name__)

async def remover_dados(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """Remove os dados do usu√°rio do sistema (atendendo √† LGPD)"""
    user_id = update.effective_user.id
    logger.info(f"Solicita√ß√£o de remo√ß√£o de dados do usu√°rio ID: {user_id}")
    
    # Verificar se o arquivo existe
    if not os.path.exists(EXCEL_FILE):
        await update.message.reply_text(
            "*A Santa Paz de Deus!*\n\n"
            "‚ùì *N√£o encontramos nenhum cadastro em nosso sistema.*\n\n"
            "_Deus te aben√ßoe!_ üôè",
            parse_mode='Markdown'
        )
        return
        
    try:
        # Carregar a planilha
        df = pd.read_excel(EXCEL_FILE)
        
        # Verificar se o usu√°rio tem cadastro
        filtro = df['User_ID'] == user_id
        
        if not filtro.any():
            await update.message.reply_text(
                "*A Santa Paz de Deus!*\n\n"
                "‚ùì *N√£o encontramos nenhum cadastro associado ao seu ID em nosso sistema.*\n\n"
                "_Deus te aben√ßoe!_ üôè",
                parse_mode='Markdown'
            )
            return
            
        # Encontrar todos os cadastros do usu√°rio
        cadastros = df[filtro]
        
        # Criar mensagem com os cadastros encontrados para confirma√ß√£o
        mensagem = (
            "*A Santa Paz de Deus!*\n\n"
            "üîç *Encontramos os seguintes cadastros associados ao seu ID:*\n\n"
        )
        
        for i, (_, row) in enumerate(cadastros.iterrows(), 1):
            mensagem += (
                f"*{i}. {row['Codigo_Casa']} - {row['Nome']}*\n"
                f"   *Fun√ß√£o:* {row['Funcao']}\n\n"
            )
            
        mensagem += (
            "‚ö†Ô∏è *ATEN√á√ÉO:*\n\n"
            "*A remo√ß√£o dos seus dados √© irrevers√≠vel e voc√™ n√£o* "
            "*receber√° mais alertas ou comunicados referentes √†s casas de ora√ß√£o.*\n\n"
            "*Deseja realmente remover todos os seus dados do sistema?*"
        )
        
        # Bot√µes de confirma√ß√£o
        keyboard = [
            [
                InlineKeyboardButton("‚úÖ Sim, remover meus dados", callback_data="confirmar_remocao"),
                InlineKeyboardButton("‚ùå N√£o, cancelar", callback_data="cancelar_remocao")
            ]
        ]
        reply_markup = InlineKeyboardMarkup(keyboard)
        
        await update.message.reply_text(
            mensagem,
            reply_markup=reply_markup,
            parse_mode='Markdown'
        )
        
    except Exception as e:
        logger.error(f"Erro ao processar solicita√ß√£o de remo√ß√£o: {e}")
        await update.message.reply_text(
            "*A Santa Paz de Deus!*\n\n"
            f"‚ùå *Ocorreu um erro ao processar sua solicita√ß√£o:* {str(e)}\n\n"
            "*Por favor, tente novamente mais tarde ou entre em contato com o administrador.*\n\n"
            "_Deus te aben√ßoe!_ üôè",
            parse_mode='Markdown'
        )

async def mostrar_politica_privacidade(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """Mostra a pol√≠tica de privacidade completa com fonte maior"""
    await update.message.reply_text(
        "*A Santa Paz de Deus!*\n\n"
        "üìã *Pol√≠tica de Privacidade - CCB Alerta Bot*\n\n"
        "*1. Dados Coletados*\n"
        "*Este servi√ßo coleta os seguintes dados:*\n"
        "‚Ä¢ *Nome completo*\n"
        "‚Ä¢ *Fun√ß√£o na igreja*\n"
        "‚Ä¢ *ID do Telegram*\n"
        "‚Ä¢ *Nome de usu√°rio do Telegram (se dispon√≠vel)*\n\n"
        
        "*2. Finalidade do Tratamento*\n"
        "*Os dados s√£o utilizados exclusivamente para:*\n"
        "‚Ä¢ *Envio de alertas sobre consumo de √°gua e energia*\n"
        "‚Ä¢ *Comunica√ß√£o administrativa sobre as Casas de Ora√ß√£o*\n"
        "‚Ä¢ *Relat√≥rios mensais de compensa√ß√£o para casas com sistema fotovoltaico*\n\n"
        
        "*3. Base Legal*\n"
        "*O tratamento √© realizado com base no consentimento do titular (Art. 7¬∫, I da LGPD)* "
        "*e para atender aos interesses leg√≠timos da administra√ß√£o local (Art. 7¬∫, IX da LGPD).*\n\n"
        
        "*4. Compartilhamento*\n"
        "*Os dados n√£o s√£o compartilhados com terceiros. O acesso √© restrito aos* "
        "*administradores do sistema para fins operacionais.*\n\n"
        
        "*5. Prazo de Conserva√ß√£o*\n"
        "*Os dados s√£o mantidos enquanto o titular exercer sua fun√ß√£o na Casa de Ora√ß√£o* "
        "*ou at√© que solicite sua remo√ß√£o.*\n\n"
        
        "*6. Direitos do Titular*\n"
        "*Voc√™ tem direito a:*\n"
        "‚Ä¢ *Acessar seus dados*\n"
        "‚Ä¢ *Solicitar exclus√£o (via comando /remover)*\n"
        "‚Ä¢ *Revogar o consentimento a qualquer momento*\n\n"
        
        "*7. Controlador*\n"
        "*Administra√ß√£o Regional CCB Mau√°*\n\n"
        
        "_Esta pol√≠tica foi atualizada em maio/2025 e est√° em conformidade com a_ "
        "_Lei Geral de Prote√ß√£o de Dados (Lei n¬∫ 13.709/2018)._\n\n"
        
        "*Para mais informa√ß√µes ou para exercer seus direitos, utilize o comando /remover* "
        "*ou entre em contato com um administrador.*\n\n"
        
        "_Deus te aben√ßoe!_ üôè",
        parse_mode='Markdown'
    )
